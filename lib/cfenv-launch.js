// Generated by CoffeeScript 1.8.0
(function() {
  var PROGRAM, cfenv, child_process, getLiveServices, gotLiveServices, launch, log, main, path;

  path = require("path");

  child_process = require("child_process");

  cfenv = require("./cfenv");

  PROGRAM = path.basename(__filename).split(".")[0];

  main = function() {
    var appEnv, appName;
    appEnv = cfenv.getAppEnv();
    appName = appEnv.name;
    if (appName == null) {
      log("unable to determine app name from manifest.yml");
      process.exit(1);
    }
    return getLiveServices(appName);
  };

  getLiveServices = function(appName) {
    var command, process;
    command = "cf env " + appName;
    return process = child_process.exec(command, function(err, stdout, stderr) {
      return gotLiveServices(appName, err, stdout, stderr);
    });
  };

  gotLiveServices = function(appName, err, stdout, stderr) {
    var match, pattern, vcapServices;
    if (err != null) {
      log("error running " + command + ": " + err.code);
      process.exit(1);
    }
    pattern = /\"VCAP_SERVICES\": \{([\s\S]*?)\n\}\n/;
    stdout += "";
    match = stdout.match(pattern);
    if (match == null) {
      log("no services found for " + appName);
      launch();
      return;
    }
    vcapServices = "{" + match[1];
    vcapServices = JSON.parse(vcapServices);
    return launch(vcapServices);
  };

  launch = function(vcapServices) {
    var args, cmd, env, stdio;
    if (vcapServices != null) {
      vcapServices = JSON.stringify(vcapServices);
    }
    cmd = process.argv[2];
    args = process.argv.slice(3);
    env = process.env;
    stdio = "inherit";
    env.VCAP_SERVICES = vcapServices;
    if (cmd == null) {
      log("no command specified to launch");
      process.exit(1);
    }
    log("launching `" + cmd + " " + (args.join(' ')) + "`");
    return child_process.spawn(cmd, args, {
      env: env,
      stdio: stdio
    });
  };

  log = function(message) {
    return console.log("" + PROGRAM + ": " + message);
  };

  exports.main = main;

  if (require.main === module) {
    main();
  }

}).call(this);
